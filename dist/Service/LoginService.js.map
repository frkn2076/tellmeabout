{"version":3,"sources":["../../src/Service/LoginService.js"],"names":["createLogin","req","res","incomingLoginObjFromClient","body","mailKey","isActive","createdBefore","LoginRepository","getLoginByEmail","email","undefined","status","json","errorCode","errorMessage","error","updateLoginByEmail","incomingEmailFromClient","loginCheck","incomingLoginFromClient","incomingLoginFromDB","password","updateLoginMailKeyByEmail"],"mappings":"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","sourcesContent":["import * as LoginRepository from './../Repository/LoginRepository';\r\n\r\n\r\n//create\r\nexport const createLogin = async (req, res) => {\r\n    try {\r\n\r\n        let incomingLoginObjFromClient = req.body;\r\n        incomingLoginObjFromClient.mailKey = \"abc\";\r\n        incomingLoginObjFromClient.isActive = false;\r\n        const createdBefore = await LoginRepository.getLoginByEmail(incomingLoginObjFromClient.email);\r\n        if(createdBefore != null || createdBefore != undefined){\r\n            res.status(500).json({\r\n                errorCode: -1,\r\n                errorMessage: 'Bu kullan覺c覺 kay覺tl覺'\r\n            })\r\n        }\r\n        await LoginRepository.createLogin(incomingLoginObjFromClient);\r\n\r\n        res.status(200).json({\r\n            errorCode: 0,\r\n            errorMessage: ''\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        res.status(500).json({\r\n            errorCode: -1,\r\n            errorMessage: '....'\r\n        })\r\n    }\r\n}\r\n//activate\r\nexport const updateLoginByEmail = async (req, res) => {\r\n    try {\r\n\r\n        let incomingEmailFromClient = req.body;\r\n        await LoginRepository.updateLoginByEmail(incomingEmailFromClient);\r\n        res.status(200).json({\r\n            errorCode: 0,\r\n            errorMessage: ''\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        res.status(500).json({\r\n            errorCode: -1,\r\n            errorMessage: '....'\r\n        })\r\n    }\r\n}\r\n\r\n//login\r\nexport const loginCheck = async (req, res) => {\r\n    try {\r\n        const incomingLoginFromClient = req.body;\r\n        const incomingLoginFromDB = await LoginRepository.getLoginByEmail(incomingLoginFromClient.email);\r\n        if(incomingLoginFromDB.password == incomingLoginFromClient.password && incomingLoginFromDB.isActive == 1)\r\n            res.status(200).json({errorCode: 0})\r\n        else{\r\n            res.status(500).json({\r\n                errorCode: -1,\r\n                errorMessage: '....'\r\n            })\r\n        }\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({\r\n            errorCode: -1,\r\n            errorMessage: 'error'\r\n        })\r\n    }\r\n}\r\n\r\n//isActive\r\nexport const isActive = async (req, res) => {\r\n    try {\r\n        const incomingLoginFromClient = req.body;\r\n        const incomingLoginFromDB = await LoginRepository.getLoginByEmail(incomingLoginFromClient.email);\r\n        if(incomingLoginFromDB != null)\r\n            res.status(200).json(incomingLoginFromDB.isActive)\r\n        else{\r\n            res.status(500).json({\r\n                errorCode: -1,\r\n                errorMessage: '....'\r\n            })\r\n        }\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({\r\n            errorCode: -1,\r\n            errorMessage: '....'\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//updateMailKey\r\nexport const updateLoginMailKeyByEmail = async (req, res) => {\r\n    try {\r\n        const incomingEmailFromClient = req.body;\r\n        await LoginRepository.updateLoginMailKeyByEmail(incomingEmailFromClient);\r\n        res.status(200).json({\r\n            errorCode: 0,\r\n            errorMessage: ''\r\n        })\r\n    } catch (error) {\r\n        res.status(500).json({\r\n            errorCode: -1,\r\n            errorMessage: '....'\r\n        })\r\n    }\r\n}\r\n"],"file":"LoginService.js"}